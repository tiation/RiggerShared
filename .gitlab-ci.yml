stages:
  - validate
  - test
  - build
  - security
  - package
  - publish
  - notify

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"

cache:
  paths:
    - node_modules/
    - .pip-cache/
    - vendor/

# Validation Stage
validate:lint:
  stage: validate
  image: node:${NODE_VERSION}-alpine
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run lint
    - npm run format:check
  artifacts:
    reports:
      codequality: lint-report.json
    paths:
      - lint-report.json
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

validate:types:
  stage: validate
  image: node:${NODE_VERSION}-alpine
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run type-check
  artifacts:
    paths:
      - type-check-report.json
    expire_in: 1 week

# Testing Stage
test:unit:
  stage: test
  image: node:${NODE_VERSION}-alpine
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run test:unit -- --coverage --reporter=json
  artifacts:
    reports:
      junit: junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
    expire_in: 1 week
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'

test:integration:
  stage: test
  image: node:${NODE_VERSION}-alpine
  services:
    - redis:alpine
    - postgres:13-alpine
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run test:integration
  artifacts:
    reports:
      junit: integration-junit.xml
    paths:
      - integration-coverage/
    expire_in: 1 week

test:cross-platform:
  stage: test
  parallel:
    matrix:
      - PLATFORM: ["android", "ios", "web"]
  image: node:${NODE_VERSION}-alpine
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run test:platform:${PLATFORM}
  artifacts:
    paths:
      - platform-test-reports/${PLATFORM}/
    expire_in: 1 week

# Build Stage
build:library:
  stage: build
  image: node:${NODE_VERSION}-alpine
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run build
    - npm run build:types
    - npm run build:docs
  artifacts:
    paths:
      - dist/
      - types/
      - docs/
    expire_in: 4 weeks

build:themes:
  stage: build
  image: node:${NODE_VERSION}-alpine
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run build:themes
    - npm run optimize:assets
  artifacts:
    paths:
      - themes/dist/
      - assets/optimized/
    expire_in: 4 weeks

# Security Stage
security:sast:
  stage: security
  image: node:${NODE_VERSION}-alpine
  script:
    - npm ci --cache .npm --prefer-offline
    - npm audit --audit-level moderate --json > npm-audit.json || true
    - npx semgrep --config=auto --json --output=semgrep-report.json . || true
  artifacts:
    reports:
      sast: semgrep-report.json
      dependency_scanning: npm-audit.json
    expire_in: 1 week
  allow_failure: true

security:license:
  stage: security
  image: node:${NODE_VERSION}-alpine
  script:
    - npm ci --cache .npm --prefer-offline
    - npx license-checker --json --out license-report.json
    - npx license-checker --summary
  artifacts:
    paths:
      - license-report.json
    expire_in: 1 week
  allow_failure: true

# Package Stage
package:npm:
  stage: package
  image: node:${NODE_VERSION}-alpine
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run build
    - npm pack
  artifacts:
    paths:
      - "*.tgz"
    expire_in: 4 weeks
  only:
    - main
    - tags

package:docker:
  stage: package
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t rigger-shared:$CI_COMMIT_SHA .
    - docker tag rigger-shared:$CI_COMMIT_SHA rigger-shared:latest
    - docker save rigger-shared:latest > rigger-shared.tar
  artifacts:
    paths:
      - rigger-shared.tar
    expire_in: 1 week
  only:
    - main
    - tags

# Publish Stage
publish:npm:
  stage: publish
  image: node:${NODE_VERSION}-alpine
  script:
    - echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
    - npm publish --access public
  environment:
    name: npm-registry
    url: https://www.npmjs.com/package/@rigger/shared
  only:
    - tags
  when: manual

publish:github:
  stage: publish
  image: node:${NODE_VERSION}-alpine
  script:
    - echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" > .npmrc
    - echo "@rigger:registry=https://npm.pkg.github.com" >> .npmrc
    - npm publish --registry https://npm.pkg.github.com
  environment:
    name: github-packages
    url: https://github.com/tiation/RiggerShared/packages
  only:
    - tags
  when: manual

publish:docker:
  stage: publish
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker load < rigger-shared.tar
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker tag rigger-shared:latest $DOCKER_REGISTRY/rigger-shared:$CI_COMMIT_TAG
    - docker tag rigger-shared:latest $DOCKER_REGISTRY/rigger-shared:latest
    - docker push $DOCKER_REGISTRY/rigger-shared:$CI_COMMIT_TAG
    - docker push $DOCKER_REGISTRY/rigger-shared:latest
  environment:
    name: docker-registry
    url: https://hub.docker.com/r/rigger/shared
  only:
    - tags
  when: manual

# Documentation Update
update:docs:
  stage: publish
  image: node:${NODE_VERSION}-alpine
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run docs:build
    - npm run docs:deploy
  environment:
    name: documentation
    url: https://docs.rigger.dev/shared
  only:
    - main
  when: manual

# Notification Stage
notify:success:
  stage: notify
  image: alpine:latest
  script:
    - echo "Build completed successfully for RiggerShared"
    - 'curl -X POST -H "Content-Type: application/json" -d "{\"text\":\"✅ RiggerShared: Build $CI_PIPELINE_ID completed successfully\"}" $SLACK_WEBHOOK_URL'
  when: on_success
  only:
    - main

notify:failure:
  stage: notify
  image: alpine:latest
  script:
    - echo "Build failed for RiggerShared"
    - 'curl -X POST -H "Content-Type: application/json" -d "{\"text\":\"❌ RiggerShared: Build $CI_PIPELINE_ID failed\"}" $SLACK_WEBHOOK_URL'
  when: on_failure
  only:
    - main

notify:release:
  stage: notify
  image: alpine:latest
  script:
    - echo "New release published for RiggerShared"
    - 'curl -X POST -H "Content-Type: application/json" -d "{\"text\":\"🚀 RiggerShared: Version $CI_COMMIT_TAG published successfully\"}" $SLACK_WEBHOOK_URL'
  when: on_success
  only:
    - tags
