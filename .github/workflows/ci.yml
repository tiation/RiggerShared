name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  schedule:
    - cron: '0 6 * * *'  # Daily security scans

env:
  NODE_VERSION: '20'
  DOCKER_REGISTRY: docker.sxc.codes
  DOCKER_HOST: docker.sxc.codes
  GITLAB_REGISTRY: gitlab.sxc.codes
  HELM_REGISTRY: helm.sxc.codes
  MONITORING_HOST: grafana.sxc.codes

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm run test:coverage
    
    - name: Security audit
      run: npm audit --audit-level moderate
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:${{ github.sha }}
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:latest

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.HOSTINGER_SSH_KEY }}
    
    - name: Deploy to Docker VPS (Staging)
      run: |
        ssh -o StrictHostKeyChecking=no root@docker.tiation.net << 'EOF'
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:latest
          docker stop riggershared-staging || true
          docker rm riggershared-staging || true
          docker run -d --name riggershared-staging -p 3001:3000 \
            --restart unless-stopped \
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:latest
        EOF
    
    - name: Health Check
      run: |
        sleep 30
        curl -f http://docker.tiation.net:3001/health || exit 1

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.HOSTINGER_SSH_KEY }}
    
    - name: Deploy to Production VPS
      run: |
        ssh -o StrictHostKeyChecking=no root@docker.sxc.codes << 'EOF'
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:latest
          docker stop riggershared-prod || true
          docker rm riggershared-prod || true
          docker run -d --name riggershared-prod -p 3000:3000 \
            --restart unless-stopped \
            --memory=512m \
            --cpus=1.0 \
            -e NODE_ENV=production \
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:latest
        EOF
    
    - name: Production Health Check
      run: |
        sleep 45
        curl -f http://docker.sxc.codes:3000/health || exit 1
        curl -f http://docker.sxc.codes:3000/metrics || exit 1
    
    - name: Update Helm Chart
      run: |
        ssh -o StrictHostKeyChecking=no root@helm.sxc.codes << 'EOF'
          cd /opt/helm-charts/riggershared
          helm upgrade riggershared . --set image.tag=${{ github.sha }} \
            --set environment=production \
            --namespace=production
        EOF
    
    - name: Send Monitoring Alert
      run: |
        curl -X POST "http://grafana.sxc.codes:3000/api/annotations" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
          -d '{
            "text": "RiggerShared deployed to production",
            "tags": ["deployment", "production", "riggershared"],
            "time": '$(date +%s000)'
          }'
    
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'ðŸš€ RiggerShared v${{ github.sha }} deployed to production successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()
