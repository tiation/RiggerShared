name: RiggerShared CI/CD Pipeline

on:
  push:
    branches: [ main, develop, release/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18.x'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  # Code Quality and Testing
  quality-check:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        registry-url: ${{ env.REGISTRY_URL }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Run format check
      run: npm run format:check
      
    - name: Run unit tests
      run: npm run test:unit:coverage
      
    - name: Run integration tests
      run: npm run test:integration
      
    - name: Run security audit
      run: npm run security:audit
      continue-on-error: true
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Build and Package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: ${{ env.REGISTRY_URL }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build package
      run: npm run build:prod
      
    - name: Build documentation
      run: npm run build:docs
      
    - name: Create package tarball
      run: npm pack
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rigger-shared-package
        path: |
          dist/
          docs/
          *.tgz
        retention-days: 30

  # Performance and Accessibility Testing
  extended-testing:
    name: Extended Testing
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance tests
      run: npm run test:performance
      continue-on-error: true
      
    - name: Run accessibility tests
      run: npm run test:a11y
      continue-on-error: true

  # Container Build
  container-build:
    name: Container Build
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Publish to npm
  publish-npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [quality-check, build]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: ${{ env.REGISTRY_URL }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build package
      run: npm run build:prod
      
    - name: Publish to npm
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Deployment to staging/production
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [quality-check, build, container-build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Deploy to staging
      if: github.ref == 'refs/heads/develop'
      run: npm run deploy:staging
      env:
        DEPLOY_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}
        
    - name: Deploy to production
      if: github.ref == 'refs/heads/main'
      run: npm run deploy:production
      env:
        DEPLOY_KEY: ${{ secrets.PRODUCTION_DEPLOY_KEY }}

  # Notify dependent repositories
  notify-dependents:
    name: Notify Dependent Repositories
    runs-on: ubuntu-latest
    needs: [publish-npm]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    strategy:
      matrix:
        repo: ['RiggerHub-web', 'RiggerConnect-web', 'RiggerConnect-capacitor', 'RiggerBackend']
    
    steps:
    - name: Repository Dispatch
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        repository: ${{ github.repository_owner }}/${{ matrix.repo }}
        event-type: rigger-shared-updated
        client-payload: |
          {
            "version": "${{ github.event.release.tag_name }}",
            "release_url": "${{ github.event.release.html_url }}"
          }
